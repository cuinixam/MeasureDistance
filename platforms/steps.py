from pathlib import Path
from typing import Any, Optional
from yanga.cmake.generator import CMakeGenerator
from yanga.cmake.cmake_backend import CMakeComment, CMakeElement, CMakeCustomCommand, CMakeCommand, CMakePath, CMakeBuildEvent
from yanga.domain.execution_context import ExecutionContext

class CreateArduinoHexCMakeGenerator(CMakeGenerator):

    def __init__(self, execution_context: ExecutionContext, output_dir: Path, config: Optional[dict[str, Any]] = None) -> None:
        super().__init__(execution_context, output_dir, config)

    def generate(self) -> list[CMakeElement]:
        elements: list[CMakeElement] = []
        elements.append(CMakeComment(f"Generated by {self.__class__.__name__}"))
        artifacts_locator = self.execution_context.create_artifacts_locator()
        variant_build_dir = CMakePath(artifacts_locator.variant_build_dir)
        variant_name = self.execution_context.variant_name or "default"
        link_out_file = variant_build_dir.joinpath(f"{variant_name}.elf")
        link_hex_file = variant_build_dir.joinpath(f"{variant_name}.hex")
        custom_command = CMakeCustomCommand(
            description="Converting ELF to HEX: ${PROJECT_NAME}.hex",
            target="${PROJECT_NAME}",
            build_event=CMakeBuildEvent.POST_BUILD,
            byproducts=[link_hex_file],
            commands=[
                CMakeCommand(
                    command="${CMAKE_OBJCOPY}",
                    arguments=["-O","ihex","-R",".eeprom",link_out_file,link_hex_file],

                )
            ],
            outputs=[],
            depends=[],
        )
        elements.append(custom_command)

        return elements